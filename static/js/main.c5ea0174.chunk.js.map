{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mapBoxToken","mapStyle","countryData","require","refugeeData","viewState","longitude","latitude","zoom","pitch","bearing","buildHeat","HeatmapLayer","id","data","getPosition","d","findCountry","country","getWeight","total","radiusPixels","addRandom","Math","random","refugeeCountry","find","item","name","undefined","console","log","latlng","openWebsite","window","open","App","initialViewState","controller","layers","onClick","e","mapboxApiAccessToken","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wkzwCAOMA,G,OAAc,6FACdC,EAAW,kCAEXC,EAAcC,EAAQ,KACtBC,EAAcD,EAAQ,KAEtBE,EAAY,CAChBC,UAAW,EACXC,SAAU,GACVC,KAAM,EACNC,MAAO,EACPC,QAAS,GAGLC,EAAY,WAChB,OAAO,IAAIC,IAAa,CACtBC,GAAI,OACJC,KAAMV,EACNW,YAAa,SAAAC,GAAC,OAAIC,EAAYD,EAAEE,UAChCC,UAAW,SAAAH,GAAC,OAAc,IAAVA,EAAEI,OAClBC,aAAc,MAIZC,EAAY,WAEhB,MADW,IAAAC,KAAKC,SAAwB,KAIpCP,EAAc,SAACQ,GACnB,IAAIP,EAAUhB,EAAYwB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,OAASH,KACrD,QAAcI,GAAXX,EAED,OADAY,QAAQC,IAAIb,EAAQc,OAAO,GAAKV,IAAaJ,EAAQc,OAAO,GAAKV,KAC1D,CAACJ,EAAQc,OAAO,GAAKV,IAAaJ,EAAQc,OAAO,GAAKV,MAG3DW,EAAc,WAClBC,OAAOC,KAAK,iCAYCC,MATf,WACE,OACE,kBAAC,IAAD,CAAQC,iBAAkBhC,EAAWiC,YAAY,EAAMC,OAAQ5B,KAC7D,4BAAQ6B,QAAS,SAACC,GAAD,OAAOR,MAAxB,WACE,kBAAC,IAAD,CAAWhC,SAAUA,EAAUyC,qBAAsB1C,MCvCzC2C,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c5ea0174.chunk.js","sourcesContent":["import React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { HeatmapLayer } from '@deck.gl/aggregation-layers';\nimport { StaticMap } from 'react-map-gl';\n\nimport './App.css';\n\nconst mapBoxToken = 'pk.eyJ1IjoiYWFyb25jYiIsImEiOiJjazRpM2E5M2cwcXdkM21xeGEwMHZ6Y2hiIn0.66ClWT4waW7ZhoNq2y0Cvg';\nconst mapStyle = 'mapbox://styles/mapbox/dark-v10';\n\nconst countryData = require('./data/countries.json');\nconst refugeeData = require('./data/data.json');\n\nconst viewState = {\n  longitude: 1,\n  latitude: 32,\n  zoom: 2,\n  pitch: 0,\n  bearing: 0\n};\n\nconst buildHeat = () => {\n  return new HeatmapLayer({\n    id: 'heat',\n    data: refugeeData,\n    getPosition: d => findCountry(d.country),\n    getWeight: d => d.total * 1.4,\n    radiusPixels: 60,\n  })\n}\n\nconst addRandom = () => {\n  let rand = Math.random() * (1 - 0.02) + 0.01;\n  return rand;\n}\n\nconst findCountry = (refugeeCountry) => {\n  let country = countryData.find(item => item.name === refugeeCountry)\n  if(country != undefined){\n    console.log(country.latlng[1] + addRandom(), country.latlng[0] + addRandom());\n    return [country.latlng[1] + addRandom(), country.latlng[0] + addRandom()];\n  }\n}\nconst openWebsite = () => {\n  window.open('https://maxicb.github.io/UI/');\n}\n\nfunction App() {\n  return (\n    <DeckGL initialViewState={viewState} controller={true} layers={buildHeat()}>\n      <button onClick={(e) => openWebsite()}>Go Back</button>\n        <StaticMap mapStyle={mapStyle} mapboxApiAccessToken={mapBoxToken}/>\n      </DeckGL>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}